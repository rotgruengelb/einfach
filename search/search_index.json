{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome at the einfach Documentation</p>"},{"location":"#get-started","title":"Get started","text":"<p><pre><code>pip install einfach\n</code></pre> Its that easy! <pre><code>from einfach import ...\n</code></pre></p>"},{"location":"#click-for-feature-overview","title":"Click for Feature Overview","text":""},{"location":"features/","title":"Features","text":"<p>Incomplete</p> <p>Note that the Documentation is under Construction.</p>"},{"location":"features/#overview","title":"Overview","text":"<ul> <li><code>__init__.py</code> &amp;&amp; <code>errors.py</code></li> <li>clip.py<ul> <li>copy</li> </ul> </li> <li>floatutils.py<ul> <li>would_be_valid_float</li> <li>is_float_in_range</li> </ul> </li> <li>pathdialog.py<ul> <li>open_file</li> <li>save_file</li> <li>open_dir</li> </ul> </li> <li>termutils.py<ul> <li>AsyncUserInput</li> </ul> </li> </ul>"},{"location":"features/internals/","title":"init.py &amp;&amp; errors.py","text":""},{"location":"features/clip/","title":"clip.py","text":"<pre><code>from einfach import clip\n</code></pre> <p>The <code>clip.py</code> file contains only 1 function which is its main purpose.</p> <pre><code>from einfach import clip\nclip.copy(\"This is put into the clipboard!\")\n</code></pre>"},{"location":"features/clip/#contains","title":"Contains","text":"Function/Class Description Use <code>copy</code> A function for putting/copying text into the users clipboard Use/More..."},{"location":"features/clip/copy/","title":"copy","text":"<p>Copies a string into the user's clipboard </p> <p>Compatibility</p> <p>This currently only works on the <code>win32</code> (Windows OS) platform.</p>"},{"location":"features/clip/copy/#possible-arguments","title":"Possible Arguments:","text":"Argument Description Type Default <code>content</code> The String that should be put in the users clipboard. This string cannot be empty or only contain whitespace/spaces <code>str</code> <code>no_os_error</code> Tells the function to not raise a <code>OSError</code> when the operating system is not <code>win32</code> <code>bool</code> <code>False</code>"},{"location":"features/clip/copy/#use","title":"Use:","text":"<pre><code>from einfach import clip\nclip.copy(content=\"Hello World\") \n# This will copy 'Hello World' into the users clipboard (if on win32).\n# This wont ignore the OSError that is raised when not run on win32.\nclip.copy(content=\"Hi! :D\", no_os_error=True) \n# This will ignore the OSError if run on a non win32 platform. \n# Note: This will result in the clipboard not changing on the non-win32 system. \n</code></pre>"},{"location":"features/floatutils/","title":"floatutils.py","text":""},{"location":"features/floatutils/is_float_in_range/","title":"is_float_in_range","text":"<p>Checks if a given float or integer value is within a specified range.</p>"},{"location":"features/floatutils/is_float_in_range/#possible-arguments","title":"Possible Arguments:","text":"Argument Description Type Default <code>value</code> The value to be checked. <code>float</code> or <code>int</code> <code>min_value</code> The minimum value of the range. <code>float</code> or <code>int</code> <code>max_value</code> The maximum value of the range. <code>float</code> or <code>int</code>"},{"location":"features/floatutils/is_float_in_range/#returns","title":"Returns:","text":"<p>A boolean value indicating whether the <code>value</code> is within the specified range (<code>min_value</code> to <code>max_value</code>). Returns <code>True</code> if the <code>value</code> is within the range, and <code>False</code> otherwise.</p>"},{"location":"features/floatutils/is_float_in_range/#use","title":"Use:","text":"<pre><code>from einfach import is_float_in_range\nresult = is_float_in_range(value=3.5, min_value=2.0, max_value=5.0)\n# Returns True, as 3.5 is within the range of 2.0 and 5.0.\nresult = is_float_in_range(value=7.2, min_value=1, max_value=6)\n# Returns False, as 7.2 is not within the range of 1 and 6.\nresult = is_float_in_range(value=10, min_value=5, max_value=15)\n# Returns True, as 10 is within the range of 5 and 15.\n</code></pre>"},{"location":"features/floatutils/would_be_valid_float/","title":"would_be_valid_float","text":"<p>Checks if a given string value can be converted to a valid float.</p>"},{"location":"features/floatutils/would_be_valid_float/#possible-arguments","title":"Possible Arguments:","text":"Argument Description Type Default <code>value</code> The string value to be checked. <code>str</code>"},{"location":"features/floatutils/would_be_valid_float/#returns","title":"Returns:","text":"<p>A boolean value indicating whether the <code>value</code> can be converted to a valid float. Returns <code>True</code> if the <code>value</code> can be converted to a float, and <code>False</code> otherwise.</p>"},{"location":"features/floatutils/would_be_valid_float/#use","title":"Use:","text":"<pre><code>from einfach import would_be_valid_float\nresult = would_be_valid_float(value=\"3.14\")\n# Returns True, as the string \"3.14\" can be converted to a valid float.\nresult = would_be_valid_float(value=\"Hello\")\n# Returns False, as the string \"Hello\" cannot be converted to a valid float.\nresult = would_be_valid_float(value=\"123\")\n# Returns True, as the string \"123\" can be converted to a valid float.\n</code></pre>"},{"location":"features/pathdialog/","title":"pathdialog.py","text":""},{"location":"features/pathdialog/open_dir/","title":"open_dir","text":"<p>Opens a directory dialog to prompt the user for selecting a directory.</p>"},{"location":"features/pathdialog/open_dir/#possible-arguments","title":"Possible Arguments:","text":"Argument Description Type Default <code>**dirdialogargs</code> Additional keyword arguments to be passed to the underlying directory dialog method. <code>**kwargs</code>"},{"location":"features/pathdialog/open_dir/#returns","title":"Returns:","text":"<p>The selected directory path as a string.</p>"},{"location":"features/pathdialog/open_dir/#use","title":"Use:","text":"<pre><code>from einfach import open_dir\n# Example 1: Prompt user to select a directory.\ndir_path = open_dir()\n# Returns the selected directory path as a string.\n# Example 2: Prompt user to select a directory. And specify directory dialog options.\ndir_path = open_dir(title=\"Select a directory\")\n</code></pre> <p>Note</p> <p>There are no <code>modes</code> for <code>open_dir</code>.</p>"},{"location":"features/pathdialog/open_file/","title":"open_file","text":"<p>Opens a file dialog to prompt the user for file selection based on the specified mode.</p>"},{"location":"features/pathdialog/open_file/#possible-arguments","title":"Possible Arguments:","text":"Argument Description Type Default <code>mode</code> The mode of the file dialog. <code>str</code> <code>**filedialogargs</code> Additional keyword arguments to be passed to the underlying file dialog method from tkinter. <code>**kwargs</code>"},{"location":"features/pathdialog/open_file/#returns","title":"Returns:","text":"<p>The file path(s) selected by the user, based on the specified mode.</p>"},{"location":"features/pathdialog/open_file/#modes","title":"Modes:","text":"<p>The <code>mode</code> argument can be one of the following values:</p> <ul> <li> <p>\"file\": Prompts the user to select a single file. Returns the selected file path as a string.</p> </li> <li> <p>\"file_name\": Prompts the user to select a single file, including specifying the file name. Returns the selected file path as a string.</p> </li> <li> <p>\"files\": Prompts the user to select multiple files. Returns a list of selected file paths.</p> </li> <li> <p>\"file_names\": Prompts the user to select multiple files, including specifying file names. Returns a list of selected file paths.</p> </li> </ul>"},{"location":"features/pathdialog/open_file/#use","title":"Use:","text":"<pre><code>from einfach import open_file\n# Example 1: Prompt user to select a single file.\nfile_path = open_file(mode=\"file\")\n# Returns the selected file path as a string.\n# Example 2: Prompt user to select a single file. And specify file dialog options.\nfile_path = open_file(mode=\"file_name\", title=\"Select a file\", defaultextension=\".txt\")\n# Returns the selected file path as a string.\n# Example 3: Prompt user to select multiple files.\nfile_paths = open_file(mode=\"files\")\n# Returns a list of selected file paths.\n</code></pre>"},{"location":"features/pathdialog/save_file/","title":"save_file","text":"<p>Opens a file dialog to prompt the user for file saving based on the specified mode.</p>"},{"location":"features/pathdialog/save_file/#possible-arguments","title":"Possible Arguments:","text":"Argument Description Type Default <code>mode</code> The mode of the file dialog. <code>str</code> <code>**filedialogargs</code> Additional keyword arguments to be passed to the underlying file dialog method from tkinter. <code>**kwargs</code>"},{"location":"features/pathdialog/save_file/#returns","title":"Returns:","text":"<p>The selected file path for saving the file, based on the specified mode.</p>"},{"location":"features/pathdialog/save_file/#modes","title":"Modes:","text":"<p>The <code>mode</code> argument can be one of the following values:</p> <ul> <li> <p>\"file\": Prompts the user to select a file path for saving. Returns a single file path as a string.</p> </li> <li> <p>\"file_name\": Prompts the user to select a file path for saving, including specifying the file name. Returns a single file path as a string.</p> </li> </ul>"},{"location":"features/pathdialog/save_file/#use","title":"Use:","text":"<pre><code>from einfach import save_file\n# Example 1: Prompt user to select a file for saving.\nfile_path = save_file(mode=\"file\")\n# Returns the selected file path as a string.\n# Example 2: Prompt user to select a file for saving. And specify file dialog options.\nfile_path = save_file(mode=\"file_name\", title=\"Save a file\", defaultextension=\".txt\")\n# Returns the selected file path as a string\n</code></pre> <p>Note</p> <p>There is no <code>\"files\"</code> or <code>\"file_names\"</code> mode for saving files.</p>"},{"location":"features/termutils/","title":"termutils.py","text":""},{"location":"features/termutils/AsyncUserInput/","title":"AsyncUserInput","text":"<p>A class that runs as a separate thread for capturing user input asynchronously.</p>"},{"location":"features/termutils/AsyncUserInput/#arguments","title":"Arguments:","text":"Argument Description Type Default <code>input_callback</code> Callback function to be invoked when input is received. <code>function (without</code>( )<code>)</code> <code>input_function</code> The input function to use for capturing user input. <code>function (without</code>( )<code>)</code> <code>input</code> <code>name</code> The name of the thread. <code>str</code> <code>'AsyncUserInput-thread'</code>"},{"location":"features/termutils/AsyncUserInput/#additional-class-methods","title":"Additional Class Methods:","text":""},{"location":"features/termutils/AsyncUserInput/#runself","title":"<code>run(self)</code>","text":"<p>Starts the input capturing loop. Invokes the <code>input_callback</code> when input is received.</p> <p>Done Automatically</p>"},{"location":"features/termutils/AsyncUserInput/#pauseself","title":"<code>pause(self)</code>","text":"<p>Pauses the input capturing thread.</p> <p>Experimental: Could cause Problems (Report any issues!).</p>"},{"location":"features/termutils/AsyncUserInput/#resumeself","title":"<code>resume(self)</code>","text":"<p>Resumes the paused input capturing thread.</p>"},{"location":"features/termutils/AsyncUserInput/#example-use","title":"Example use:","text":"<pre><code>def handle_input(user_input):\n# Handle the received input\nprint(f\"Received input: {user_input}\")\nasync_input = AsyncUserInput(\ninput_callback=callback_function,\ninput_function=input,\nname='AsyncUserInput-thread')\nasync_input.pause()  # Pauses the input capturing thread\nasync_input.resume()  # Resumes the input capturing thread\n</code></pre> input_callback <p>The class runs as a separate thread and captures user input asynchronously. Make sure to handle the input appropriately in the provided <code>input_callback</code> function.</p>"}]}